{

package compiler

type Program struct {
    
}

}

Program <- (Declaration _)* EOF

Declaration <- "func" __ Identifier _ '(' ArgumentList ')' _ ret:Type _ body:Block

ArgumentList <- ""

Type <- ""

Block <- '{' '}'

Identifier <- SimpleIdentifier / StringIdentifier

SimpleIdentifier <- [a-zA-Z_][a-zA-Z_0-9]* {
    return c.text, nil
}

StringIdentifier <- '#' val:String {
    return val, nil
}

Number <- '-'? Integer ( '.' DecimalDigit+ )? Exponent? {
    return strconv.ParseFloat(string(c.text), 64)
}

Integer <- '0' / NonZeroDecimalDigit DecimalDigit*

Exponent <- 'e'i [+-]? DecimalDigit+

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return strconv.Unquote(string(c.text))
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

HexDigit <- [0-9a-f]i

Bool <- "true" { return true, nil } / "false" { return false, nil }

_ "whitespace" <- [ \t\r\n]*
__ "whitespace" <- [ \t\r\n]+

EOF <- !.
